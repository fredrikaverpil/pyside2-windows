# syntax examples: https://www.appveyor.com/docs/appveyor-yml/

# version format
version: 1.0.{build}

# branches to build
branches:
  only:
    - master

environment:
  # environment docs: https://www.appveyor.com/docs/build-environment/

  # global variables
  global:
    CMAKE: "C:\\Program Files (x86)\\cmake\\bin\\cmake.exe"

  matrix:
    # Qt 5.6, Python 3.5 32-bit, MSVC2015 (v14)
    - PYTHON: "C:\\Python35"
      QT: "C:\\Qt\\5.6\\msvc2015"
      PYSIDE_BRANCH: "5.6"
      OPENSSL: "C:\\OpenSSL-Win32\\bin"
      VS: "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat"
      ARCH: x86
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      platform: x86
      fast_finish: true

    # Qt 5.6, Python 3.5 64-bit, MSVC2015 (v14)
    - PYTHON: "C:\\Python35-x64"
      QT: "C:\\Qt\\5.6\\msvc2015_64"
      PYSIDE_BRANCH: "5.6"
      OPENSSL: "C:\\OpenSSL-Win64\\bin"
      VS: "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat"
      ARCH: amd64
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      platform: x64
      fast_finish: true

    # Qt 5.6, Python 3.6 32-bit, MSVC2015 (v14)
    - PYTHON: "C:\\Python36"
      QT: "C:\\Qt\\5.6\\msvc2015"
      PYSIDE_BRANCH: "5.6"
      OPENSSL: "C:\\OpenSSL-Win32\\bin"
      VS: "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat"
      ARCH: x86
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      platform: x86
      fast_finish: true

    # Qt 5.6, Python 3.6 64-bit, MSVC2015 (v14)
    - PYTHON: "C:\\Python36-x64"
      QT: "C:\\Qt\\5.6\\msvc2015_64"
      PYSIDE_BRANCH: "5.6"
      OPENSSL: "C:\\OpenSSL-Win64\\bin"
      VS: "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat"
      ARCH: amd64
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      platform: x64
      fast_finish: true

    # Qt 5.9, Python 3.5 32-bit, MSVC2015 (v14)
    - PYTHON: "C:\\Python35"
      QT: "C:\\Qt\\5.9\\msvc2015"
      PYSIDE_BRANCH: "5.9"
      LIBCLANG_ZIP_FOLDER: http://download.qt.io/development_releases/prebuilt/libclang
      LIBCLANG_ZIP: libclang-release_39-windows-vs2015_32.7z
      OPENSSL: "C:\\OpenSSL-Win32\\bin"
      VS: "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat"
      ARCH: x86
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      platform: x86
      fast_finish: true

    # Qt 5.9, Python 3.5 64-bit, MSVC2015 (v14)
    - PYTHON: "C:\\Python35-x64"
      QT: "C:\\Qt\\5.9\\msvc2015_64"
      PYSIDE_BRANCH: "5.9"
      LIBCLANG_ZIP_FOLDER: http://download.qt.io/development_releases/prebuilt/libclang
      LIBCLANG_ZIP: libclang-release_39-windows-vs2015_64.7z
      OPENSSL: "C:\\OpenSSL-Win64\\bin"
      VS: "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat"
      ARCH: amd64
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      platform: x64
      fast_finish: true

    # Qt 5.9, Python 3.6 32-bit, MSVC2015 (v14)
    - PYTHON: "C:\\Python36"
      QT: "C:\\Qt\\5.9\\msvc2015"
      PYSIDE_BRANCH: "5.9"
      LIBCLANG_ZIP_FOLDER: http://download.qt.io/development_releases/prebuilt/libclang
      LIBCLANG_ZIP: libclang-release_39-windows-vs2015_32.7z
      OPENSSL: "C:\\OpenSSL-Win32\\bin"
      VS: "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat"
      ARCH: x86
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      platform: x86
      fast_finish: true

    # Qt 5.9, Python 3.6 64-bit, MSVC2015 (v14)
    - PYTHON: "C:\\Python36-x64"
      QT: "C:\\Qt\\5.9\\msvc2015_64"
      PYSIDE_BRANCH: "5.9"
      LIBCLANG_ZIP_FOLDER: http://download.qt.io/development_releases/prebuilt/libclang
      LIBCLANG_ZIP: libclang-release_39-windows-vs2015_64.7z
      OPENSSL: "C:\\OpenSSL-Win64\\bin"
      VS: "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\vcvarsall.bat"
      ARCH: amd64
      APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
      platform: x64
      fast_finish: true

init:
  - pwd
  - SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%
  - python -c "import sys; x = sys.version; print(x)"
  - if defined VS call "%VS%" %ARCH%
  - git clone --recursive --branch %PYSIDE_BRANCH% https://code.qt.io/pyside/pyside-setup.git C:\pyside-setup

install:
  - pip install wheel

  # pip-installing lxml doesn't provide the libXml2/libxml2 libraries, only the binaries
  # - pip install lxml

  # libclang required for PySide2 5.9 branch
  - if [%PYSIDE_BRANCH%]==[5.9] (curl -L -fsS -o %LIBCLANG_ZIP% %LIBCLANG_ZIP_FOLDER%/%LIBCLANG_ZIP%)
  - if [%PYSIDE_BRANCH%]==[5.9] (7z x %LIBCLANG_ZIP%)
  - if [%PYSIDE_BRANCH%]==[5.9] (SET LLVM_INSTALL_DIR=%CD%\libclang)

# before_build:
  # Fix bug https://bugreports.qt.io/browse/PYSIDE-357
  - sed -i -e "s~\b\(packages\b.*\)],~\1, 'pyside2uic.Compiler', 'pyside2uic.port_v' + str(sys.version_info[0])],~" C:/pyside-setup/setup.py
  # Verify sed hacks
  - type C:\pyside-setup\setup.py


build_script:
  - python C:\pyside-setup\setup.py bdist_wheel --ignore-git --standalone --no-examples --jom --qmake="%QT%\bin\qmake.exe" --openssl="%OPENSSL" --cmake="%CMAKE%"

after_build:
  - mkdir %CD%\wheels
  - xcopy C:\pyside-setup\dist\PySide2*.whl %CD%\wheels

before_test:
  - for %%i in (%CD%\wheels\*.whl) do pip install %%i

# very simple test, not actually sufficient to test the standalone wheel
test_script:
  - python -c "import PySide2"

artifacts:
  - path: wheels\*.whl
